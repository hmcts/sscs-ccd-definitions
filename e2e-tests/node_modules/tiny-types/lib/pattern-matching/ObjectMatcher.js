"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectMatcher = void 0;
var TinyType_1 = require("../TinyType");
var PatternMatcher_1 = require("./PatternMatcher");
var rules_1 = require("./rules");
/**
 * @access private
 */
var ObjectMatcher = /** @class */ (function (_super) {
    __extends(ObjectMatcher, _super);
    function ObjectMatcher() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ObjectMatcher.prototype.when = function (pattern, transformation) {
        return new ObjectMatcher(this.value, this.rules.concat(this.rule(pattern, transformation)));
    };
    ObjectMatcher.prototype.rule = function (pattern, transformation) {
        switch (true) {
            case pattern instanceof TinyType_1.TinyType:
                return new rules_1.MatchesEqualTinyType(pattern, transformation);
            case typeof pattern === 'function':
                return new rules_1.MatchesObjectsWithCommonPrototype(pattern, transformation);
            default:
                return new rules_1.MatchesIdentical(pattern, transformation);
        }
    };
    return ObjectMatcher;
}(PatternMatcher_1.PatternMatcher));
exports.ObjectMatcher = ObjectMatcher;
//# sourceMappingURL=ObjectMatcher.js.map