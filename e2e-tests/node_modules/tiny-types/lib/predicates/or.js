"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.or = void 0;
var isArray_1 = require("./isArray");
var isDefined_1 = require("./isDefined");
var isGreaterThan_1 = require("./isGreaterThan");
var Predicate_1 = require("./Predicate");
/**
 * @desc Ensures that the `value` meets at least one of the provided {@link Predicate}s.
 *
 * @example
 * import { ensure, isEqualTo, isGreaterThan, isLessThan, or } from 'tiny-type'l
 *
 * class Percentage extends TinyType {
 *     constructor(public readonly value: number) {
 *         ensure('Percentage', value, or(isEqualTo(0), isGreaterThan(0)), or(isLessThan(100), isEqualTo(100));
 *     }
 * }
 *
 * @param {Predicate<T>} predicates
 * @returns {Predicate<T>}
 */
function or() {
    var predicates = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        predicates[_i] = arguments[_i];
    }
    return new Or(predicates);
}
exports.or = or;
/** @access private */
var Or = /** @class */ (function (_super) {
    __extends(Or, _super);
    function Or(predicates) {
        var _this = _super.call(this) || this;
        _this.predicates = predicates;
        var results = [
            function (_) { return (0, isDefined_1.isDefined)().check(_); },
            function (_) { return (0, isArray_1.isArray)().check(_); },
            function (_) { return (0, isGreaterThan_1.isGreaterThan)(0).check(_.length); },
        ];
        if (results.some(function (check) { return check(_this.predicates) instanceof Predicate_1.Failure; })) {
            throw new Error("Looks like you haven't specified any predicates to check the value against?");
        }
        return _this;
    }
    /** @override */
    Or.prototype.check = function (value) {
        var results = this.predicates.map(function (predicate) { return predicate.check(value); });
        var anySuccess = results.some(function (result) { return result instanceof Predicate_1.Success; });
        var failures = results.filter(function (_) { return _ instanceof Predicate_1.Failure; })
            .map(function (_) { return _.description; });
        return anySuccess
            ? new Predicate_1.Success(value)
            : new Predicate_1.Failure(value, describe(failures));
    };
    return Or;
}(Predicate_1.Predicate));
function describe(issues) {
    return "either ".concat(issues.join(', ').replace(/,([^,]*)$/, ' or$1'));
}
//# sourceMappingURL=or.js.map