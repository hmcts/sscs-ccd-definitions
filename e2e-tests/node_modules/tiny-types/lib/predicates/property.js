"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.property = void 0;
var and_1 = require("./and");
var Predicate_1 = require("./Predicate");
/**
 * @desc Ensures that the `property` of the `value` meets the `predicates`
 *
 * @example
 * import { ensure, isGreaterThan, property, TinyType } from 'tiny-types';
 *
 * class Name extends TinyType {
 *     constructor(public readonly value: string) {
 *         super();
 *         ensure('Name', value, property('length', isGreaterThan(3)));
 *     }
 * }
 *
 * @returns {Predicate<T>}
 */
function property(propertyName) {
    var predicates = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        predicates[_i - 1] = arguments[_i];
    }
    return new HaveProperty(propertyName, and_1.and.apply(void 0, predicates));
}
exports.property = property;
/** @access private */
var HaveProperty = /** @class */ (function (_super) {
    __extends(HaveProperty, _super);
    function HaveProperty(propertyName, predicate) {
        var _this = _super.call(this) || this;
        _this.propertyName = propertyName;
        _this.predicate = predicate;
        return _this;
    }
    /** @override */
    HaveProperty.prototype.check = function (value) {
        var result = this.predicate.check(value[this.propertyName]);
        return result instanceof Predicate_1.Failure
            ? new Predicate_1.Failure(value, "have a property \"".concat(String(this.propertyName), "\" that ").concat(result.description)
                .replace(/\bbe\b/gi, 'is')
                .replace(/\beither is\b/gi, 'is either'))
            : new Predicate_1.Success(value);
    };
    return HaveProperty;
}(Predicate_1.Predicate));
//# sourceMappingURL=property.js.map