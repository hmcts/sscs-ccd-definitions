"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.and = void 0;
var isArray_1 = require("./isArray");
var isDefined_1 = require("./isDefined");
var isGreaterThan_1 = require("./isGreaterThan");
var Predicate_1 = require("./Predicate");
/**
 * @desc Ensures that the `value` meets all the provided {@link Predicate}s.
 *
 * @example
 * import { and, ensure, isDefined, isGreaterThan, isInteger, TinyType } from 'tiny-types';
 *
 * class AgeInYears extends TinyType {
 *     constructor(public readonly value: number) {
 *         ensure('AgeInYears', value, and(isDefined(), isInteger(), isGreaterThan(18));
 *     }
 * }
 *
 * @param {...Array<Predicate<T>>} predicates
 * @returns {Predicate<T>}
 */
function and() {
    var predicates = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        predicates[_i] = arguments[_i];
    }
    return new And(predicates);
}
exports.and = and;
/** @access private */
var And = /** @class */ (function (_super) {
    __extends(And, _super);
    function And(predicates) {
        var _this = _super.call(this) || this;
        _this.predicates = predicates;
        var results = [
            function (_) { return (0, isDefined_1.isDefined)().check(_); },
            function (_) { return (0, isArray_1.isArray)().check(_); },
            function (_) { return (0, isGreaterThan_1.isGreaterThan)(0).check(_.length); },
        ];
        if (results.some(function (check) { return check(_this.predicates) instanceof Predicate_1.Failure; })) {
            throw new Error("Looks like you haven't specified any predicates to check the value against?");
        }
        return _this;
    }
    /** @override */
    And.prototype.check = function (value) {
        for (var _i = 0, _a = this.predicates; _i < _a.length; _i++) {
            var predicate = _a[_i];
            var result = predicate.check(value);
            if (result instanceof Predicate_1.Failure) {
                return result;
            }
        }
        return new Predicate_1.Success(value);
    };
    return And;
}(Predicate_1.Predicate));
//# sourceMappingURL=and.js.map