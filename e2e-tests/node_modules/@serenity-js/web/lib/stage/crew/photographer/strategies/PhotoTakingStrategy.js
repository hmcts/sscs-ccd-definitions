"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhotoTakingStrategy = void 0;
const core_1 = require("@serenity-js/core");
const events_1 = require("@serenity-js/core/lib/events");
const model_1 = require("@serenity-js/core/lib/model");
const screenplay_1 = require("../../../../screenplay");
/**
 * Configures the {@apilink Photographer} to take {@apilink Photo|photos}, a.k.a. screenshots,
 * of the {@apilink Activity} performed by the {@apilink Actor} in the {@apilink actorInTheSpotlight|spotlight}
 * when desired conditions are met.
 *
 * @group Stage
 */
class PhotoTakingStrategy {
    /**
     * Takes a photo of the web browser used by the {@apilink Actor} in the {@apilink actorInTheSpotlight|spotlight}.
     *
     * #### Learn more
     * - {@apilink ActivityStarts}
     * - {@apilink ActivityFinished}
     * - {@apilink Stage}
     *
     * @param event
     * @param stage
     *  The Stage that holds reference to the Actor in the spotlight
     */
    async considerTakingPhoto(event, stage) {
        if (!this.shouldTakeAPhotoOf(event)) {
            return void 0;
        }
        let browseTheWeb;
        try {
            browseTheWeb = screenplay_1.BrowseTheWeb.as(stage.theActorInTheSpotlight());
        }
        catch {
            // actor doesn't have a browser, abort
            return void 0;
        }
        const id = model_1.CorrelationId.create(), nameSuffix = this.photoNameFor(event);
        stage.announce(new events_1.AsyncOperationAttempted(new model_1.Name(`Photographer:${this.constructor.name}`), new model_1.Description(`Taking screenshot of '${nameSuffix}'...`), id, stage.currentTime()));
        try {
            const capabilities = await browseTheWeb.browserCapabilities();
            const page = await browseTheWeb.currentPage();
            const screenshot = await page.takeScreenshot();
            const context = [capabilities.platformName, capabilities.browserName, capabilities.browserVersion], photoName = this.combinedNameFrom(...context, nameSuffix);
            stage.announce(new events_1.ActivityRelatedArtifactGenerated(event.sceneId, event.activityId, photoName, model_1.Photo.fromBase64(screenshot), stage.currentTime()));
            return stage.announce(new events_1.AsyncOperationCompleted(id, stage.currentTime()));
        }
        catch (error) {
            if (this.shouldIgnore(error)) {
                stage.announce(new events_1.AsyncOperationAborted(new model_1.Description(`Aborted taking screenshot of '${nameSuffix}' because of ${error.constructor && error.constructor.name}`), id, stage.currentTime()));
            }
            else {
                stage.announce(new events_1.AsyncOperationFailed(error, id, stage.currentTime()));
            }
        }
    }
    combinedNameFrom(...parts) {
        return new model_1.Name(parts.filter(v => !!v).join('-'));
    }
    shouldIgnore(error) {
        return error instanceof core_1.LogicError
            || (error.name && error.name === core_1.LogicError.name);
    }
}
exports.PhotoTakingStrategy = PhotoTakingStrategy;
//# sourceMappingURL=PhotoTakingStrategy.js.map