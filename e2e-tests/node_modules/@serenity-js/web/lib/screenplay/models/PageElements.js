"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageElements = void 0;
const core_1 = require("@serenity-js/core");
const abilities_1 = require("../abilities");
/**
 * Uses the {@apilink Actor|actor's} {@apilink Ability|ability} to {@apilink BrowseTheWeb} to identify
 * a group of Web elements located by {@apilink Selector}.
 *
 * ## Learn more
 *
 * - [Page Element Query Language](/handbook/web-testing/page-element-query-language)
 * - {@apilink List}
 * - {@apilink MetaQuestion}
 *
 * @group Models
 */
class PageElements extends core_1.List {
    static located(selector) {
        return new PageElements(relativeToDocumentRoot(selector));
    }
    /**
     * @param locator
     */
    constructor(locator) {
        super(allElementsOf(locator));
        this.locator = locator;
    }
    of(parent) {
        return new PageElements(relativeToParent(this.locator, parent))
            .describedAs(`${this.toString()} of ${parent}`);
    }
}
exports.PageElements = PageElements;
/**
 * @package
 */
function relativeToDocumentRoot(selector) {
    return core_1.Question.about(String(selector), async (actor) => {
        const bySelector = await actor.answer(selector);
        const currentPage = await abilities_1.BrowseTheWeb.as(actor).currentPage();
        return currentPage.locate(bySelector).locator;
    });
}
/**
 * @package
 */
function relativeToParent(relativeLocator, parent) {
    return core_1.Question.about(`${relativeLocator.toString()} of ${parent}`, async (actor) => {
        const locator = await actor.answer(relativeLocator);
        const parentElement = await actor.answer(parent);
        return locator.of(parentElement.locator);
    });
}
/**
 * @package
 */
function allElementsOf(locator) {
    return core_1.Question.about(`page elements located ${String(locator)}`, async (actor) => {
        const resolved = await actor.answer(locator);
        return resolved.allElements();
    });
}
//# sourceMappingURL=PageElements.js.map