/// <reference types="node" />
import * as util from 'util';
import { PageElement } from './PageElement';
import { RootLocator } from './RootLocator';
import { Selector } from './selectors';
/**
 * {@apilink Locator} uses a {@apilink Selector} to locate a {@apilink PageElement} or {@apilink PageElements}
 * within the {@apilink Page}.
 *
 * ## Learn more
 * - {@apilink RootLocator}
 * - {@apilink Page.locate}
 * - {@apilink PageElement}
 * - {@apilink PageElements}
 *
 * @group Models
 */
export declare abstract class Locator<Native_Element_Type, Native_Selector_Type = any> extends RootLocator<Native_Element_Type> {
    protected readonly parent: RootLocator<Native_Element_Type>;
    readonly selector: Selector;
    protected constructor(parent: RootLocator<Native_Element_Type>, selector: Selector);
    abstract nativeElement(): Promise<Native_Element_Type>;
    abstract allNativeElements(): Promise<Array<Native_Element_Type>>;
    switchToFrame(element: Native_Element_Type): Promise<void>;
    switchToParentFrame(): Promise<void>;
    switchToMainFrame(): Promise<void>;
    protected abstract nativeSelector(): Native_Selector_Type;
    abstract of(parent: RootLocator<Native_Element_Type>): Locator<Native_Element_Type>;
    abstract locate(child: Locator<Native_Element_Type>): Locator<Native_Element_Type>;
    abstract element(): PageElement<Native_Element_Type>;
    abstract allElements(): Promise<Array<PageElement<Native_Element_Type>>>;
    toString(): string;
    [util.inspect.custom]: (depth: number, options: util.InspectOptionsStylized, inspect: typeof util.inspect) => string;
}
//# sourceMappingURL=Locator.d.ts.map