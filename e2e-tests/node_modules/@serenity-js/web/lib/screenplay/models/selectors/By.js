"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.By = void 0;
const core_1 = require("@serenity-js/core");
const ByCss_1 = require("./ByCss");
const ByCssContainingText_1 = require("./ByCssContainingText");
const ByDeepCss_1 = require("./ByDeepCss");
const ById_1 = require("./ById");
const ByTagName_1 = require("./ByTagName");
const ByXPath_1 = require("./ByXPath");
/**
 * @group Models
 */
class By {
    /**
     * Locates a {@apilink PageElement} using a [CSS selector](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors).
     *
     * @param selector
     */
    static css(selector) {
        return core_1.Question.about((0, core_1.f) `by css (${selector})`, async (actor) => {
            const bySelector = await actor.answer(selector);
            return new ByCss_1.ByCss(bySelector);
        });
    }
    /**
     * Locates a {@apilink PageElement} with a given [`innerText`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText)
     * using a [CSS selector](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors).
     *
     * @param selector
     * @param text
     */
    static cssContainingText(selector, text) {
        return core_1.Question.about((0, core_1.f) `by css (${selector}) containing text ${text}`, async (actor) => {
            const bySelector = await actor.answer(selector);
            const textSelector = await actor.answer(text);
            return new ByCssContainingText_1.ByCssContainingText(bySelector, textSelector);
        });
    }
    /**
     * Locates a {@apilink PageElement} using a [CSS selector](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors)
     * capable of piercing [shadow DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM)-piercing
     *
     * @param selector
     */
    static deepCss(selector) {
        return core_1.Question.about((0, core_1.f) `by deep css (${selector})`, async (actor) => {
            const bySelector = await actor.answer(selector);
            return new ByDeepCss_1.ByDeepCss(bySelector);
        });
    }
    /**
     * Locates a {@apilink PageElement} using its [id](https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors).
     *
     * @param selector
     */
    static id(selector) {
        return core_1.Question.about((0, core_1.f) `by id (${selector})`, async (actor) => {
            const bySelector = await actor.answer(selector);
            return new ById_1.ById(bySelector);
        });
    }
    /**
     * Locates a {@apilink PageElement} using the name of its [HTML tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element).
     *
     * @param selector
     */
    static tagName(selector) {
        return core_1.Question.about((0, core_1.f) `by tag name (${selector})`, async (actor) => {
            const bySelector = await actor.answer(selector);
            return new ByTagName_1.ByTagName(bySelector);
        });
    }
    /**
     * Locates a {@apilink PageElement} using an [XPath selector](https://developer.mozilla.org/en-US/docs/Web/XPath).
     *
     * @param selector
     */
    static xpath(selector) {
        return core_1.Question.about((0, core_1.f) `by xpath (${selector})`, async (actor) => {
            const bySelector = await actor.answer(selector);
            return new ByXPath_1.ByXPath(bySelector);
        });
    }
}
exports.By = By;
//# sourceMappingURL=By.js.map