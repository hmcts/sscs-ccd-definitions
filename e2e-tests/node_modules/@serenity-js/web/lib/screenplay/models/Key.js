"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Key = void 0;
/**
 * Represents keyboard keys that aren't text, and that can be used with the {@apilink Interaction|interaction} to {@apilink Press}.
 *
 * **Note:** Modifier keys like {@apilink Key.Shift}, {@apilink Key.Alt} and {@apilink Key.Meta} (a.k.a. "Command" on Mac) will stay pressed,
 * so there's no need to depress them.
 *
 * ## Learn more
 *
 * - {@apilink Press}
 * - {@apilink Page.sendKeys}
 * - [W3C WebDriver Spec: Keyboard Actions](https://w3c.github.io/webdriver/webdriver-spec.html#keyboard-actions)
 * - [Selenium WebDriver: Inputs](https://github.com/SeleniumHQ/selenium/blob/trunk/javascript/node/selenium-webdriver/lib/input.js#L46)
 * - [WebdriverIO: Constants](https://github.com/webdriverio/webdriverio/blob/main/packages/wdio-utils/src/constants.ts#L5)
 *
 * @group Models
 */
class Key {
    static isKey(maybeKey) {
        return !!maybeKey
            && maybeKey instanceof Key;
    }
    constructor(devtoolsName, utf16codePoint, isModifier = false) {
        this.devtoolsName = devtoolsName;
        this.utf16codePoint = utf16codePoint;
        this.isModifier = isModifier;
    }
    toString() {
        return this.devtoolsName.replace(/([a-z])([\dA-Z])/g, '$1 $2');
    }
}
Key.Alt = new Key('Alt', '\uE00A', true);
Key.ArrowDown = new Key('ArrowDown', '\uE015');
Key.ArrowLeft = new Key('ArrowLeft', '\uE012');
Key.ArrowRight = new Key('ArrowRight', '\uE014');
Key.ArrowUp = new Key('ArrowUp', '\uE013');
Key.Backspace = new Key('Backspace', '\uE003');
Key.Cancel = new Key('Cancel', '\uE001');
Key.Clear = new Key('Clear', '\uE005');
Key.Control = new Key('Control', '\uE009', true);
Key.Delete = new Key('Delete', '\uE017');
Key.End = new Key('End', '\uE010');
Key.Enter = new Key('Enter', '\uE007');
Key.Escape = new Key('Escape', '\uE00C');
Key.F1 = new Key('F1', '\uE031');
Key.F2 = new Key('F2', '\uE032');
Key.F3 = new Key('F3', '\uE033');
Key.F4 = new Key('F4', '\uE034');
Key.F5 = new Key('F5', '\uE035');
Key.F6 = new Key('F6', '\uE036');
Key.F7 = new Key('F7', '\uE037');
Key.F8 = new Key('F8', '\uE038');
Key.F9 = new Key('F9', '\uE039');
Key.F10 = new Key('F10', '\uE03A');
Key.F11 = new Key('F11', '\uE03B');
Key.F12 = new Key('F12', '\uE03C');
Key.Help = new Key('Help', '\uE002');
Key.Home = new Key('Home', '\uE011');
Key.Insert = new Key('Insert', '\uE016');
Key.Meta = new Key('Meta', '\uE03D', true);
Key.Numpad0 = new Key('Numpad0', '\uE01A');
Key.Numpad1 = new Key('Numpad1', '\uE01B');
Key.Numpad2 = new Key('Numpad2', '\uE01C');
Key.Numpad3 = new Key('Numpad3', '\uE01D');
Key.Numpad4 = new Key('Numpad4', '\uE01E');
Key.Numpad5 = new Key('Numpad5', '\uE01F');
Key.Numpad6 = new Key('Numpad6', '\uE020');
Key.Numpad7 = new Key('Numpad7', '\uE021');
Key.Numpad8 = new Key('Numpad8', '\uE022');
Key.Numpad9 = new Key('Numpad9', '\uE023');
Key.NumpadAdd = new Key('NumpadAdd', '\uE025');
Key.NumpadDecimal = new Key('NumpadDecimal', '\uE028');
Key.NumpadDivide = new Key('NumpadDivide', '\uE029');
Key.NumpadEqual = new Key('NumpadEqual', '\uE019');
Key.NumpadMultiply = new Key('NumpadMultiply', '\uE024');
Key.NumpadSubtract = new Key('NumpadSubtract', '\uE027');
Key.PageDown = new Key('PageDown', '\uE00F');
Key.PageUp = new Key('PageUp', '\uE00E');
Key.Pause = new Key('Pause', '\uE00B');
Key.Semicolon = new Key('Semicolon', '\uE018');
Key.Shift = new Key('Shift', '\uE008', true);
Key.Space = new Key('Space', '\uE00D');
Key.Tab = new Key('Tab', '\uE004');
exports.Key = Key;
//# sourceMappingURL=Key.js.map