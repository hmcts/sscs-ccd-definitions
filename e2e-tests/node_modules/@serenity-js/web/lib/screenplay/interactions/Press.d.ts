import { Activity, Answerable, AnswersQuestions, Interaction, UsesAbilities } from '@serenity-js/core';
import { Key, PageElement } from '../models';
import { PageElementInteraction } from './PageElementInteraction';
/**
 * Instructs an {@apilink Actor|actor} who has the {@apilink Ability|ability} to {@apilink BrowseTheWeb}
 * to send a key press or a sequence of keys to a Web element.
 *
 * **Note:** On macOS, some keyboard shortcuts might not work
 * with the [`devtools` protocol](https://webdriver.io/docs/automationProtocols/#devtools-protocol).
 *
 *  For example:
 *  - to *copy*, instead of {@apilink Key.Meta}+`C`, use {@apilink Key.Control}+{@apilink Key.Insert}
 *  - to *cut*, instead of {@apilink Key.Meta}+`X`, use {@apilink Key.Control}+{@apilink Key.Delete}
 *  - to *paste*, instead of {@apilink Key.Meta}+`V`, use {@apilink Key.Shift}+{@apilink Key.Insert}
 *
 * ## Example widget
 *
 * ```html
 * <form>
 *   <input type="text" name="example" id="example" />
 * </form>
 * ```
 *
 * ## Lean Page Object describing the widget
 *
 * ```ts
 * import { By, PageElement } from '@serenity-js/web'
 *
 * class Form {
 *   static exampleInput = () =>
 *     PageElement.located(By.id('example'))
 *       .describedAs('example input')
 * }
 * ```
 *
 * ## Pressing keys
 *
 * ```ts
 * import { actorCalled } from '@serenity-js/core'
 * import { Key, Press, Value } from '@serenity-js/web'
 * import { Ensure, equals } from '@serenity-js/assertions'
 *
 * await actorCalled('Priyanka')
 *   .attemptsTo(
 *     Press.the('H', 'i', '!', Key.ENTER).in(Form.exampleInput()),
 *     Ensure.that(Value.of(Form.exampleInput), equals('Hi!')),
 *   )
 * ```
 *
 * ## Learn more
 *
 * - {@apilink Key}
 * - {@apilink BrowseTheWeb}
 * - {@apilink PageElement}
 *
 * @group Activities
 */
export declare class Press extends PageElementInteraction {
    private readonly keys;
    /**
     * Instantiates an {@apilink Interaction|interaction}
     * that instructs the {@apilink Actor|actor}
     * to press a sequence of {@apilink Key|keys},
     *
     * When no `field` is specified, the key sequence will be sent to the currently focused element,
     * and if no element is focused - to the `document.body` to handle.
     *
     * @param keys
     *  A sequence of one or more keys to press
     */
    static the(...keys: Array<Answerable<Key | string | Key[] | string[]>>): Activity & {
        in: (field: Answerable<PageElement>) => Interaction;
    };
    /**
     * Send the key sequence to a specific element.
     *
     * @param field
     */
    in(field: Answerable<PageElement>): Interaction;
    /**
     * @param keys
     *  A sequence of one or more keys to press
     */
    protected constructor(keys: Answerable<Array<Key | string>>);
    /**
     * @inheritDoc
     */
    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void>;
}
//# sourceMappingURL=Press.d.ts.map