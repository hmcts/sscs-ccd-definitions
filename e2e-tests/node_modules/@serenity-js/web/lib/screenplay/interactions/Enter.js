"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Enter = void 0;
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
const PageElementInteraction_1 = require("./PageElementInteraction");
/**
 * Instructs an {@apilink Actor|actor} who has the {@apilink Ability|ability} to {@apilink BrowseTheWeb}
 * to enter a value into a [form `input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) field.
 *
 * ## Example widget
 * ```html
 * <form>
 *  <input type="text" name="example" id="example" />
 * </form>
 * ```
 *
 * ## Lean Page Object describing the widget
 *
 * ```ts
 * import { By, PageElement } from '@serenity-js/web'
 *
 * class Form {
 *   static exampleInput = () =>
 *     PageElement.located(By.id('example'))
 *       .describedAs('example input')
 *  }
 * ```
 *
 * ## Entering the value into a form field
 *
 * ```ts
 * import { actorCalled } from '@serenity-js/core';
 * import { Enter } from '@serenity-js/web';
 *
 * await actorCalled('Esme')
 *   .attemptsTo(
 *     Enter.theValue('Hello world!').into(Form.exampleInput()),
 *   )
 * ```
 *
 * ## Learn more
 *
 * - {@apilink BrowseTheWeb}
 * - {@apilink PageElement}
 *
 * @group Activities
 */
class Enter extends PageElementInteraction_1.PageElementInteraction {
    /**
     * Instantiates this {@apilink Interaction}.
     *
     * @param values
     *  The text value to be entered
     */
    static theValue(...values) {
        return {
            into: (field /* todo Question<AlertPromise> | AlertPromise */) => new Enter(values, field),
        };
    }
    constructor(values, field /* todo | Question<AlertPromise> | AlertPromise */) {
        super((0, core_1.d) `#actor enters ${values.join(', ')} into ${field}`);
        this.values = values;
        this.field = field;
    }
    /**
     * @inheritDoc
     */
    async performAs(actor) {
        const field = await this.resolve(actor, this.field);
        const valuesToEnter = await (0, io_1.asyncMap)(this.values, value => actor.answer(value));
        return field.enterValue(valuesToEnter.flat());
    }
}
exports.Enter = Enter;
//# sourceMappingURL=Enter.js.map