"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = void 0;
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
const stringified_1 = require("@serenity-js/core/lib/io/stringified");
const screenplay_1 = require("@serenity-js/core/lib/screenplay");
const models_1 = require("../models");
/**
 * Instructs an {@apilink Actor|actor} who has the {@apilink Ability|ability} to {@apilink BrowseTheWeb}
 * to select an option from a [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select),
 * either by its display name, or by value.
 *
 * ## Learn more
 * - {@apilink Selected}
 *
 * @group Activities
 */
class Select {
    /**
     * Instantiates an {@apilink Interaction|interaction}
     * that instructs the {@apilink Actor|actor}
     * to select a single [`<option>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     * with a given [`value`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-value).,
     *
     * #### Example widget
     *
     * ```html
     * <select data-test='countries'>
     *   <option value='UK'>United Kingdom</option>
     *   <option value='PL'>Poland</option>
     *   <option value='US'>United States</option>
     * </select>
     * ```
     *
     * #### Lean Page Object describing the widget
     *
     * ```ts
     * import { By, PageElement } from '@serenity-js/web'
     *
     * class Countries {
     *   static dropdown = () =>
     *     PageElement.located(By.css('[data-test="countries"]'))
     *       .describedAs('countries dropdown')
     * }
     * ```
     *
     * #### Retrieving the selected value
     *
     * ```ts
     * import { actorCalled } from '@serenity-js/core'
     * import { Select, Selected } from '@serenity-js/web';
     * import { Ensure, equals } from '@serenity-js/assertions'
     *
     * await actorCalled('Nick')
     *   .attemptsTo(
     *     Select.value('UK').from(Countries.dropdown()),
     *     Ensure.that(Selected.valueOf(Countries.dropdown()), equals('UK')),
     *   )
     * ```
     *
     * #### Learn more
     * - {@apilink Selected.valueOf}
     * - {@apilink PageElement}
     *
     * @param value
     *  A value of the [`option` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     *  for the {@apilink Actor} to select
     */
    static value(value) {
        return {
            from: (pageElement) => screenplay_1.Interaction.where((0, core_1.d) `#actor selects value ${value} from ${pageElement}`, async (actor) => {
                const element = await actor.answer(pageElement);
                const desiredValue = await actor.answer(value);
                await element.selectOptions(models_1.SelectOption.withValue(desiredValue));
            }),
        };
    }
    /**
     * Instantiates an {@apilink Interaction|interaction}
     * that instructs the {@apilink Actor|actor}
     * to select multiple [`<option>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     * identified by their [`value`s](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-value).
     *
     * #### Example widget
     *
     * ```ts
     * <select multiple data-test='countries'>
     *   <option value='UK'>United Kingdom</option>
     *   <option value='PL'>Poland</option>
     *   <option value='US'>United States</option>
     * </select>
     * ```
     *
     * #### Lean Page Object describing the widget
     *
     * ```ts
     * import { By, PageElement } from '@serenity-js/web'
     *
     * class Countries {
     *   static dropdown = () =>
     *     PageElement.located(By.css('[data-test="countries"]'))
     *       .describedAs('countries dropdown')
     * }
     * ```
     *
     * #### Retrieving the selected value
     *
     * ```ts
     * import { actorCalled } from '@serenity-js/core'
     * import { Select, Selected } from '@serenity-js/web'
     * import { Ensure, equals } from '@serenity-js/assertions'
     *
     * await actorCalled('Nick')
     *   .attemptsTo(
     *     Select.values('UK').from(Countries.dropdown()),
     *     Ensure.that(Selected.valuesOf(Countries.dropdown()), equals([ 'UK' ])),
     *   )
     * ```
     *
     * #### Learn more
     *
     * - {@apilink Selected.valuesOf}
     * - {@apilink PageElement}
     *
     * @param values
     *  Values of the [`option` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     *  for the {@apilink Actor} to select
     */
    static values(...values) {
        return {
            from: (pageElement) => screenplay_1.Interaction.where(`#actor selects values ${(0, io_1.commaSeparated)(values.flat(), item => (0, stringified_1.stringified)(item, { inline: true }))} from ${(0, stringified_1.stringified)(pageElement, { inline: true })}`, async (actor) => {
                const answers = await (0, io_1.asyncMap)(values, value => actor.answer(value));
                const desiredValues = answers.flat();
                const element = await actor.answer(pageElement);
                await element.selectOptions(...desiredValues.map(value => models_1.SelectOption.withValue(value)));
            }),
        };
    }
    /**
     * Instantiates an {@apilink Interaction|interaction}
     * that instructs the {@apilink Actor|actor}
     * to select a single [`<option>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     * with a given description.
     *
     * #### Example widget
     *
     * ```html
     * <select data-test='countries'>
     *   <option value='UK'>United Kingdom</option>
     *   <option value='PL'>Poland</option>
     *   <option value='US'>United States</option>
     * </select>
     * ```
     *
     * #### Lean Page Object describing the widget
     * ```ts
     * import { By, PageElement } from '@serenity-js/by'
     *
     * class Countries {
     *   static dropdown = () =>
     *     PageElement.located(By.css('[data-test="countries"]'))
     *       .describedAs('countries dropdown')
     * }
     * ```
     *
     * #### Retrieving the selected value
     *
     * ```ts
     * import { actorCalled } from '@serenity-js/core'
     * import { Select, Selected } from '@serenity-js/web'
     * import { Ensure, equals } from '@serenity-js/assertions'
     *
     * await actorCalled('Nick')
     *   .whoCan(BrowseTheWeb.using(protractor.browser))
     *   .attemptsTo(
     *     Select.option('Poland').from(Countries.dropdown()),
     *     Ensure.that(
     *       Selected.optionIn(Countries.dropdown()),
     *       equals('Poland')
     *     ),
     *   )
     * ```
     *
     * #### Learn more
     * - {@apilink Selected.optionIn}
     * - {@apilink PageElement}
     *
     * @param value
     *  Text of the [`option` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     *  for the {@apilink Actor} to select
     */
    static option(value) {
        return {
            from: (pageElement) => screenplay_1.Interaction.where((0, core_1.d) `#actor selects ${value} from ${pageElement}`, async (actor) => {
                const element = await actor.answer(pageElement);
                const desiredLabel = await actor.answer(value);
                await element.selectOptions(models_1.SelectOption.withLabel(desiredLabel));
            }),
        };
    }
    /**
     * Instantiates an {@apilink Interaction|interaction}
     * that instructs the {@apilink Actor|actor}
     * to select multiple [`<option>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     * identified by their descriptions.
     *
     * #### Example widget
     *
     * ```html
     * <select multiple data-test='countries'>
     *   <option value='UK'>United Kingdom</option>
     *   <option value='PL'>Poland</option>
     *   <option value='US'>United States</option>
     * </select>
     * ```
     *
     * #### Lean Page Object describing the widget
     *
     * ```ts
     * import { By, PageElement } from '@serenity-js/web'
     *
     * class Countries {
     *   static dropdown = () =>
     *     PageElement.located(By.css('[data-test="countries"]'))
     *       .describedAs('countries dropdown')
     * }
     * ```
     *
     * ##### Retrieving the selected value
     *
     * ```ts
     * import { actorCalled } from '@serenity-js/core'
     * import { Select, Selected } from '@serenity-js/web'
     * import { Ensure, equals } from '@serenity-js/assertions'
     *
     * await actorCalled('Nick')
     *   .whoCan(BrowseTheWeb.using(protractor.browser))
     *   .attemptsTo(
     *     Select.options('Poland', 'United States').from(Countries.dropdown()),
     *     Ensure.that(
     *       Selected.optionsIn(Countries.dropdown()),
     *       equals([ 'Poland', 'United States' ])
     *     ),
     *   )
     * ```
     *
     * #### Learn more
     * - {@apilink Selected.optionsIn}
     * - {@apilink PageElement}
     *
     * @param values
     *  Text of the [`option` elements  ](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     *  for the {@apilink Actor} to select
     */
    static options(...values) {
        return {
            from: (pageElement) => screenplay_1.Interaction.where(`#actor selects ${(0, io_1.commaSeparated)(values.flat(), item => (0, stringified_1.stringified)(item, { inline: true }))} from ${(0, stringified_1.stringified)(pageElement, { inline: true })}`, async (actor) => {
                const answers = await (0, io_1.asyncMap)(values, value => actor.answer(value));
                const desiredLabels = answers.flat();
                const element = await actor.answer(pageElement);
                await element.selectOptions(...desiredLabels.map(label => models_1.SelectOption.withLabel(label)));
            }),
        };
    }
}
exports.Select = Select;
//# sourceMappingURL=Select.js.map