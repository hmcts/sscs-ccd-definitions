"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Text = void 0;
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
const models_1 = require("../models");
/**
 * Uses the {@apilink Actor|actor's} {@apilink Ability|ability} to {@apilink BrowseTheWeb} to retrieve
 * the visible (i.e. not hidden by CSS) [`innerText`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText) of:
 * - a given {@apilink PageElement}
 * - a group of {@apilink PageElements}
 *
 * The result includes the visible text of any sub-elements, without any leading or trailing whitespace.
 *
 * ## Example widget
 *
 * ```html
 * <h1>Shopping list</h1>
 * <ul id="shopping-list">
 *   <li>Coffee<li>
 *   <li class="bought">Honey<li>
 *   <li>Chocolate<li>
 * </ul>
 * ```
 *
 * ## Retrieve text of a single {@apilink PageElement}
 *
 * ```ts
 * import { actorCalled } from '@serenity-js/core'
 * import { Ensure, equals } from '@serenity-js/assertions'
 * import { By, PageElement, Text } from '@serenity-js/web'
 *
 * const header = () =>
 *   PageElement.located(By.css('h1'))
 *     .describedAs('header')
 *
 * await actorCalled('Lisa')
 *   .whoCan(BrowseTheWebWithWebdriverIO.using(browser))
 *   .attemptsTo(
 *     Ensure.that(Text.of(header()), equals('Shopping list')),
 *   )
 * ```
 *
 * ## Retrieve text of multiple {@apilink PageElements}
 *
 * ```ts
 * import { actorCalled } from '@serenity-js/core'
 * import { Ensure, equals } from '@serenity-js/assertions'
 * import { By, PageElement, Text } from '@serenity-js/web'
 *
 * const shoppingListItems = () =>
 *   PageElements.located(By.css('#shopping-list li'))
 *     .describedAs('shopping list items')
 *
 * await actorCalled('Lisa')
 *   .attemptsTo(
 *     Ensure.that(
 *       Text.ofAll(shoppingListItems()),
 *       equals([ 'Coffee', 'Honey', 'Chocolate' ])
 *     ),
 *   )
 * ```
 *
 * ## Using as filter in {@apilink PageElements|Page Element Query Language}
 *
 * ```ts
 * import { actorCalled } from '@serenity-js/core'
 * import { contain, Ensure } from '@serenity-js/assertions'
 * import { By, CssClasses, PageElement, Text } from '@serenity-js/web'
 *
 * const shoppingListItemCalled = (name: string) =>
 *   PageElements.located(By.css('#shopping-list li'))
 *     .describedAs('shopping list items')
 *     .where(Text, equals(name))
 *     .first()
 *
 * await actorCalled('Lisa')
 *   .attemptsTo(
 *     Ensure.that(
 *       CssClasses.of(shoppingListItemCalled('Honey)),
 *       contain('bought')
 *     ),
 *   )
 * ```
 *
 * ## Learn more
 * - {@apilink BrowseTheWeb}
 * - {@apilink MetaQuestion}
 * - {@apilink QuestionAdapter}
 * - {@apilink Question}
 *
 * @group Questions
 */
class Text {
    /**
     * Instantiates a {@apilink Question} that uses
     * the {@apilink Actor|actor's} {@apilink Ability|ability} to {@apilink BrowseTheWeb} to retrieve
     * the text of a single {@apilink PageElement}.
     *
     * #### Learn more
     * - {@apilink MetaQuestion}
     *
     * @param pageElement
     */
    static of(pageElement) {
        return TextOfSingleElement.of(pageElement);
    }
    static ofAll(pageElements) {
        if (pageElements instanceof models_1.PageElements) {
            return TextOfMultipleElements.of(pageElements);
        }
        return core_1.Question.about((0, core_1.d) `the text of ${pageElements}`, async (actor) => {
            const elements = await actor.answer(pageElements);
            return (0, io_1.asyncMap)(elements, element => element.text());
        });
    }
}
exports.Text = Text;
class TextOfSingleElement extends core_1.Question {
    static of(element) {
        return core_1.Question.createAdapter(new TextOfSingleElement(element));
    }
    constructor(element) {
        super();
        this.element = element;
        this.subject = (0, core_1.d) `the text of ${element}`;
    }
    of(parent) {
        return new TextOfSingleElement(models_1.PageElement.of(this.element, parent));
    }
    /**
     * @inheritDoc
     */
    async answeredBy(actor) {
        const element = await actor.answer(this.element);
        return element.text();
    }
    /**
     * @inheritDoc
     */
    describedAs(subject) {
        this.subject = subject;
        return this;
    }
    /**
     * @inheritDoc
     */
    toString() {
        return this.subject;
    }
}
class TextOfMultipleElements extends core_1.Question {
    static of(elements) {
        return core_1.Question.createAdapter(new TextOfMultipleElements(elements));
    }
    constructor(elements) {
        super();
        this.elements = elements;
        this.subject = (0, core_1.d) `the text of ${elements}`;
    }
    of(parent) {
        return new TextOfMultipleElements(this.elements.of(parent));
    }
    /**
     * @inheritDoc
     */
    async answeredBy(actor) {
        const elements = await actor.answer(this.elements);
        return (0, io_1.asyncMap)(elements, element => element.text());
    }
    /**
     * @inheritDoc
     */
    describedAs(subject) {
        this.subject = subject;
        return this;
    }
    /**
     * @inheritDoc
     */
    toString() {
        return this.subject;
    }
}
//# sourceMappingURL=Text.js.map