import { DomainEvent } from '../../../events';
import { FileSystem } from '../../../io';
import { Stage } from '../../Stage';
import { StageCrewMember } from '../../StageCrewMember';
/**
 * Stores any {@apilink Artifact|artifacts} emitted via {@apilink ArtifactGenerated} events on the {@apilink FileSystem}
 *
 * ## Registering `ArtifactArchiver` programmatically
 *
 * ```ts
 * import { ArtifactArchiver, configure } from '@serenity-js/core'
 *
 * configure({
 *   crew: [
 *     ArtifactArchiver.storingArtifactsAt(`/target/site/serenity`),
 *   ]
 *   // other Serenity/JS config
 * })
 * ```
 *
 * ## Registering `ArtifactArchiver` using Protractor configuration
 *
 * ```js
 * // protractor.conf.js
 * const { ArtifactArchiver } = require('@serenity-js/core')
 *
 * exports.config = {
 *   framework:     'custom',
 *   frameworkPath: require.resolve('@serenity-js/protractor/adapter'),
 *
 *   serenity: {
 *     crew: [
 *       ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),
 *     ],
 *     // other Serenity/JS config
 *   },
 *   // other Protractor config
 * };
 * ```
 *
 * ## Registering `ArtifactArchiver` using WebdriverIO configuration
 *
 * ```ts
 * // wdio.conf.js
 * import { ArtifactArchiver } from '@serenity-js/core'
 * import { WebdriverIOConfig } from '@serenity-js/webdriverio'
 *
 * export const config: WebdriverIOConfig = {
 *
 *     framework: '@serenity-js/webdriverio',
 *
 *     serenity: {
 *         crew: [
 *             ArtifactArchiver.storingArtifactsAt(`/target/site/serenity`),
 *         ]
 *         // other Serenity/JS config
 *     },
 *     // other WebdriverIO config
 * }
 * ```
 *
 * [ '@serenity-js/core:ArtifactArchiver', { outputDirectory: 'target/site/serenity' } ],
 *
 * @group Stage
 */
export declare class ArtifactArchiver implements StageCrewMember {
    private readonly fileSystem;
    private stage?;
    /**
     * Instantiates an `ArtifactArchiver` storing artifacts in a given `destination`.
     * The `destination` directory will be created automatically and recursively if it doesn't exist.
     *
     * @param destination
     */
    static storingArtifactsAt(...destination: string[]): StageCrewMember;
    /**
     * Instantiates an `ArtifactArchiver` storing artifacts in a given `outputDirectory`.
     * The `outputDirectory` will be created automatically and recursively if it doesn't exist.
     *
     * @param config
     */
    static fromJSON(config: {
        outputDirectory: string;
    }): StageCrewMember;
    /**
     * @param {FileSystem} fileSystem
     * @param {Stage} [stage]
     *  The stage this {@apilink StageCrewMember} should be assigned to
     */
    constructor(fileSystem: FileSystem, stage?: Stage);
    assignedTo(stage: Stage): StageCrewMember;
    /**
     * Handles {@apilink DomainEvent} objects emitted by the {@apilink StageManager}.
     *
     * @see {@apilink StageCrewMember}
     *
     * @listens {ArtifactGenerated}
     * @emits {ArtifactArchived}
     *
     * @param event
     */
    notifyOf(event: DomainEvent): void;
    private fileNameFor;
    private archive;
    private archivisationAnnouncement;
}
//# sourceMappingURL=ArtifactArchiver.d.ts.map