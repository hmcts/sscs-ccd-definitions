import { ErrorFactory, ErrorOptions, RuntimeError } from '../errors';
import { DomainEvent } from '../events';
import { ActivityDetails, CorrelationId } from '../model';
import { Actor, Clock, Duration, Timestamp } from '../screenplay';
import { ListensToDomainEvents } from '../stage';
import { Cast } from './Cast';
import { StageManager } from './StageManager';
/**
 * Stage is the place where {@apilink Actor|actors} perform.
 *
 * In more technical terms, the Stage is the main event bus propagating {@apilink DomainEvent|DomainEvents}
 * to {@apilink Actor|Actors} it instantiates and {@apilink StageCrewMember|StageCrewMembers} that have been registered with it.
 *
 * It is unlikely that you'll ever need to interact with the `Stage` directly in your tests. Instead, you'll use functions like
 * {@apilink actorCalled} and {@apilink actorInTheSpotlight}.
 *
 * ## Learn more
 * - {@apilink configure}
 * - {@apilink engage}
 *
 * @group Stage
 */
export declare class Stage {
    private cast;
    private readonly manager;
    private errors;
    private readonly clock;
    private readonly interactionTimeout;
    private static readonly unknownSceneId;
    /**
     * Actors instantiated after the scene has started,
     * who will be dismissed when the scene finishes.
     */
    private actorsOnFrontStage;
    /**
     * Actors instantiated before the scene has started,
     * who will be dismissed when the test run finishes.
     */
    private actorsOnBackstage;
    private actorsOnStage;
    /**
     * The most recent actor referenced via the {@apilink actor} method
     */
    private actorInTheSpotlight;
    private currentActivity;
    private currentScene;
    /**
     * @param cast
     * @param manager
     * @param errors
     * @param clock
     * @param interactionTimeout
     */
    constructor(cast: Cast, manager: StageManager, errors: ErrorFactory, clock: Clock, interactionTimeout: Duration);
    /**
     * An alias for {@apilink Stage.actor}
     *
     * @param name
     */
    theActorCalled(name: string): Actor;
    /**
     * Instantiates a new {@apilink Actor} or fetches an existing one
     * identified by their name if they've already been instantiated.
     *
     * @param name
     *  Case-sensitive name of the Actor, e.g. `Alice`
     */
    actor(name: string): Actor;
    /**
     * Returns the last {@apilink Actor} instantiated via {@apilink Stage.actor}.
     * Useful when you don't can't or choose not to reference the actor by their name.
     *
     * @throws {LogicError}
     *  If no {@apilink Actor} has been activated yet
     */
    theActorInTheSpotlight(): Actor;
    /**
     * Returns `true` if there is an {@apilink Actor} in the spotlight, `false` otherwise.
     */
    theShowHasStarted(): boolean;
    /**
     * Configures the Stage to prepare {@apilink Actor|Actors}
     * instantiated via {@apilink Stage.actor} using the provided {@apilink Cast}.
     *
     * @param actors
     */
    engage(actors: Cast): void;
    /**
     * Assigns listeners to be notified of {@apilink DomainEvent|DomainEvents}
     * emitted via {@apilink Stage.announce}.s
     *
     * @param listeners
     */
    assign(...listeners: ListensToDomainEvents[]): void;
    /**
     * Notifies all the assigned listeners of the events,
     * emitting them one by one.
     *
     * @param events
     */
    announce(...events: Array<DomainEvent>): void;
    private announceSingle;
    /**
     * Returns current time. This method should be used whenever
     * {@apilink DomainEvent} objects are instantiated by you programmatically.
     */
    currentTime(): Timestamp;
    /**
     * Generates and remembers a {@apilink CorrelationId}
     * for the current scene.
     *
     * This method should be used in custom test runner adapters
     * when instantiating a {@apilink SceneStarts} event.
     *
     * #### Learn more
     * - {@apilink Stage.currentSceneId}
     * - {@apilink CorrelationId}
     */
    assignNewSceneId(): CorrelationId;
    /**
     * Returns the {@apilink CorrelationId} for the current scene.
     *
     * #### Learn more
     * - {@apilink Stage.assignNewSceneId}
     */
    currentSceneId(): CorrelationId;
    /**
     * Generates and remembers a {@apilink CorrelationId}
     * for the current {@apilink Activity}.
     *
     * This method should be used in custom test runner adapters
     * when instantiating the {@apilink ActivityStarts} event.
     *
     * #### Learn more
     * - {@apilink Stage.currentActivityId}
     */
    assignNewActivityId(activityDetails: ActivityDetails): CorrelationId;
    /**
     * Returns the {@apilink CorrelationId} for the current {@apilink Activity}.
     *
     * #### Learn more
     * - {@apilink Stage.assignNewSceneId}
     */
    currentActivityId(): CorrelationId;
    /**
     * Returns a Promise that will be resolved when any asynchronous
     * post-processing activities performed by Serenity/JS are completed.
     *
     * Invoked in Serenity/JS test runner adapters to inform the test runner when
     * the scenario has finished and when it's safe for the test runner to proceed
     * with the next test, or finish execution.
     */
    waitForNextCue(): Promise<void>;
    createError<RE extends RuntimeError>(errorType: new (...args: any[]) => RE, options: ErrorOptions): RE;
    private instantiatedActorCalled;
    private dismiss;
    private typeOf;
}
//# sourceMappingURL=Stage.d.ts.map