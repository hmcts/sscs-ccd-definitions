"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Activity_description, _Activity_location;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Activity = void 0;
const path_1 = __importDefault(require("path"));
const errors_1 = require("../errors");
const io_1 = require("../io");
/**
 * **Activities** represents {@apilink Task|tasks} and {@apilink Interaction|interactions} to be performed by an {@apilink Actor|actor}.
 *
 * Learn more about:
 * - [Performing activities at multiple levels](/handbook/design/screenplay-pattern#performing-activities-at-multiple-levels)
 * - {@apilink Actor}
 * - {@apilink PerformsActivities}
 * - [Command design pattern on Wikipedia](https://en.wikipedia.org/wiki/Command_pattern)
 *
 * @group Screenplay Pattern
 */
class Activity {
    constructor(description, location = Activity.callerLocation(5)) {
        _Activity_description.set(this, void 0);
        _Activity_location.set(this, void 0);
        __classPrivateFieldSet(this, _Activity_description, description, "f");
        __classPrivateFieldSet(this, _Activity_location, location, "f");
    }
    /**
     * Returns the location where this {@apilink Activity} was instantiated.
     */
    instantiationLocation() {
        return __classPrivateFieldGet(this, _Activity_location, "f");
    }
    /**
     * Generates a human-friendly description to be used when reporting this Activity.
     *
     * **Note**: When this activity is reported, token `#actor` in the description
     * will be replaced with the name of the actor performing this Activity.
     *
     * For example, `#actor clicks on a button` becomes `Wendy clicks on a button`.
     */
    toString() {
        return __classPrivateFieldGet(this, _Activity_description, "f");
    }
    static callerLocation(frameOffset) {
        const originalStackTraceLimit = Error.stackTraceLimit;
        Error.stackTraceLimit = 30;
        const error = new Error('Caller location marker');
        Error.stackTraceLimit = originalStackTraceLimit;
        const nonSerenityNodeModulePattern = new RegExp(`node_modules` + `\\` + path_1.default.sep + `(?!@serenity-js` + `\\` + path_1.default.sep + `)`);
        const frames = this.errorStackParser.parse(error);
        const userLandFrames = frames.filter(frame => !((frame === null || frame === void 0 ? void 0 : frame.fileName.startsWith('node:')) || // node 16 and 18
            (frame === null || frame === void 0 ? void 0 : frame.fileName.startsWith('internal')) || // node 14
            nonSerenityNodeModulePattern.test(frame === null || frame === void 0 ? void 0 : frame.fileName) // ignore node_modules, except for @serenity-js/*
        ));
        const index = Math.min(Math.max(1, frameOffset), userLandFrames.length - 1);
        // use the desired user-land frame, or the last one from the stack trace for internal invocations
        const invocationFrame = userLandFrames[index] || frames[frames.length - 1];
        return new io_1.FileSystemLocation(io_1.Path.from(invocationFrame.fileName), invocationFrame.lineNumber, invocationFrame.columnNumber);
    }
}
_Activity_description = new WeakMap(), _Activity_location = new WeakMap();
Activity.errorStackParser = new errors_1.ErrorStackParser();
exports.Activity = Activity;
//# sourceMappingURL=Activity.js.map