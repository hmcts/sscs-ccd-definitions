"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Timestamp = void 0;
const moment_1 = __importDefault(require("moment"));
const tiny_types_1 = require("tiny-types");
const Duration_1 = require("./Duration");
/**
 * Represents a point in time.
 *
 * `Timestamp` makes it easier for Serenity/JS to work with information related to time, like {@apilink DomainEvent|domain events}.
 *
 * ## Learn more
 * - {@apilink Duration}
 * - [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)
 *
 * @group Time
 */
class Timestamp extends tiny_types_1.TinyType {
    static fromJSON(v) {
        return new Timestamp(new Date((0, tiny_types_1.ensure)(Timestamp.name, v, isSerialisedISO8601Date())));
    }
    static fromTimestampInSeconds(v) {
        return Timestamp.fromTimestampInMilliseconds(v * 1000);
    }
    static fromTimestampInMilliseconds(v) {
        return new Timestamp((0, moment_1.default)(v).toDate());
    }
    constructor(value = new Date()) {
        super();
        this.value = value;
        (0, tiny_types_1.ensure)(Timestamp.name, value, (0, tiny_types_1.isDefined)(), (0, tiny_types_1.isInstanceOf)(Date));
    }
    diff(another) {
        (0, tiny_types_1.ensure)('timestamp', another, (0, tiny_types_1.isDefined)());
        return new Duration_1.Duration(Math.abs((0, moment_1.default)(this.value).diff(another.value, 'ms', true)));
    }
    plus(duration) {
        (0, tiny_types_1.ensure)('duration', duration, (0, tiny_types_1.isDefined)());
        return new Timestamp((0, moment_1.default)(this.value).add(duration.inMilliseconds(), 'ms').toDate());
    }
    less(duration) {
        (0, tiny_types_1.ensure)('duration', duration, (0, tiny_types_1.isDefined)());
        return new Timestamp((0, moment_1.default)(this.value).subtract(duration.inMilliseconds(), 'ms').toDate());
    }
    isBefore(another) {
        (0, tiny_types_1.ensure)('timestamp', another, (0, tiny_types_1.isDefined)());
        return this.value.getTime() < another.value.getTime();
    }
    isBeforeOrEqual(another) {
        (0, tiny_types_1.ensure)('timestamp', another, (0, tiny_types_1.isDefined)());
        return this.value.getTime() <= another.value.getTime();
    }
    isAfter(another) {
        (0, tiny_types_1.ensure)('timestamp', another, (0, tiny_types_1.isDefined)());
        return this.value.getTime() > another.value.getTime();
    }
    isAfterOrEqual(another) {
        (0, tiny_types_1.ensure)('timestamp', another, (0, tiny_types_1.isDefined)());
        return this.value.getTime() >= another.value.getTime();
    }
    toMilliseconds() {
        return (0, moment_1.default)(this.value).valueOf();
    }
    toSeconds() {
        return (0, moment_1.default)(this.value).unix();
    }
    toJSON() {
        return this.value.toJSON();
    }
    toString() {
        return this.value.toISOString();
    }
}
exports.Timestamp = Timestamp;
function isSerialisedISO8601Date() {
    return tiny_types_1.Predicate.to(`be an ISO-8601-compliant date`, (value) => (0, moment_1.default)(value, moment_1.default.ISO_8601, true).isValid());
}
//# sourceMappingURL=Timestamp.js.map