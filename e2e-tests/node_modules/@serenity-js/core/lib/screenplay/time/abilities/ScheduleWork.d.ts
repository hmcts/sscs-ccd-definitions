import { Ability, Discardable, Initialisable } from '../../abilities';
import { Clock, DelayedCallback, Duration, RepeatUntilLimits } from '../models';
/**
 * An {@apilink Ability} that enables an {@apilink Actor} to schedule a callback function
 * to be executed with a delay, or until some condition is met.
 *
 * Used internally by the {@apilink Interaction|interaction} to {@apilink Wait}.
 *
 * @experimental
 *
 * @group Time
 */
export declare class ScheduleWork extends Ability implements Initialisable, Discardable {
    private readonly scheduler;
    constructor(clock: Clock, interactionTimeout: Duration);
    initialise(): void;
    isInitialised(): boolean;
    /**
     * @param callback
     * @param limits
     */
    repeatUntil<Result>(callback: DelayedCallback<Result>, limits?: RepeatUntilLimits<Result>): Promise<Result>;
    waitFor(delay: Duration): Promise<void>;
    discard(): void;
}
//# sourceMappingURL=ScheduleWork.d.ts.map