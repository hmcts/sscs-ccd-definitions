"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.List = void 0;
const errors_1 = require("../../errors");
const io_1 = require("../../io");
const Question_1 = require("../Question");
const Task_1 = require("../Task");
const expectations_1 = require("./expectations");
/**
 * Serenity/JS Screenplay Pattern-style wrapper around {@apilink Array}
 * and array-like structures - see {@apilink PageElements}.
 *
 * @group Questions
 */
class List extends Question_1.Question {
    static of(collection) {
        return new List(collection);
    }
    constructor(collection) {
        super();
        this.collection = collection;
        this.subject = (0, io_1.d) `${collection}`;
    }
    eachMappedTo(question) {
        return new List(new EachMappedTo(this.collection, question, this.subject));
    }
    forEach(callback) {
        return new ForEachLoop(this.collection, this.subject, callback);
    }
    where(question, expectation) {
        return new List(new Where(this.collection, question, expectation, this.subject));
    }
    count() {
        return Question_1.Question.about(`the number of ${this.subject}`, async (actor) => {
            const items = await this.answeredBy(actor);
            return items.length;
        });
    }
    first() {
        return Question_1.Question.about(`the first of ${this.subject}`, async (actor) => {
            const items = await this.answeredBy(actor);
            if (items.length === 0) {
                throw new errors_1.ListItemNotFoundError((0, io_1.d) `Can't retrieve the first item from a list with 0 items: ${items}`);
            }
            return items[0];
        });
    }
    last() {
        return Question_1.Question.about(`the last of ${this.subject}`, async (actor) => {
            const items = await this.answeredBy(actor);
            if (items.length === 0) {
                throw new errors_1.ListItemNotFoundError((0, io_1.d) `Can't retrieve the last item from a list with 0 items: ${items}`);
            }
            return items[items.length - 1];
        });
    }
    nth(index) {
        return Question_1.Question.about(`the ${ordinal(index + 1)} of ${this.subject}`, async (actor) => {
            const items = await this.answeredBy(actor);
            if (index < 0 || items.length <= index) {
                throw new errors_1.ListItemNotFoundError(`Can't retrieve the ${ordinal(index)} item from a list with ${items.length} items: ` + (0, io_1.d) `${items}`);
            }
            return items[index];
        });
    }
    async answeredBy(actor) {
        const collection = await actor.answer(this.collection);
        if (!Array.isArray(collection)) {
            throw new errors_1.LogicError((0, io_1.d) `A List has to wrap an Array-compatible object. ${collection} given.`);
        }
        return collection;
    }
    describedAs(subject) {
        this.subject = subject;
        return this;
    }
    toString() {
        return this.subject;
    }
}
exports.List = List;
/**
 * @package
 * @param {number} index
 */
function ordinal(index) {
    const lastDigit = Math.abs(index) % 10, lastTwoDigits = Math.abs(index) % 100;
    switch (true) {
        case (lastDigit === 1 && lastTwoDigits !== 11):
            return index + 'st';
        case (lastDigit === 2 && lastTwoDigits !== 12):
            return index + 'nd';
        case (lastDigit === 3 && lastTwoDigits !== 13):
            return index + 'rd';
        default:
            return index + 'th';
    }
}
/**
 * @package
 */
class Where extends Question_1.Question {
    constructor(collection, question, expectation, originalSubject) {
        super();
        this.collection = collection;
        this.question = question;
        this.expectation = expectation;
        const prefix = this.collection instanceof Where
            ? ' and'
            : ' where';
        this.subject = originalSubject + prefix + (0, io_1.d) ` ${question} does ${expectation}`;
    }
    async answeredBy(actor) {
        try {
            const collection = await actor.answer(this.collection);
            const results = [];
            for (const item of collection) {
                const actual = this.question.of(item);
                const expectationOutcome = await actor.answer(this.expectation.isMetFor(actual));
                if (expectationOutcome instanceof expectations_1.ExpectationMet) {
                    results.push(item);
                }
            }
            return results;
        }
        catch (error) {
            throw new errors_1.LogicError((0, io_1.d) `Couldn't check if ${this.question} of an item of ${this.collection} does ${this.expectation}`, error);
        }
    }
    describedAs(subject) {
        this.subject = subject;
        return this;
    }
    toString() {
        return this.subject;
    }
}
/**
 * @package
 */
class EachMappedTo extends Question_1.Question {
    constructor(collection, mapping, originalSubject) {
        super();
        this.collection = collection;
        this.mapping = mapping;
        this.subject = originalSubject + (0, io_1.d) ` mapped to ${this.mapping}`;
    }
    async answeredBy(actor) {
        const collection = await actor.answer(this.collection);
        const mapped = [];
        for (const item of collection) {
            mapped.push(await actor.answer(this.mapping.of(item)));
        }
        return mapped;
    }
    describedAs(subject) {
        this.subject = subject;
        return this;
    }
    toString() {
        return this.subject;
    }
}
/**
 * @package
 */
class ForEachLoop extends Task_1.Task {
    constructor(collection, subject, fn) {
        super(`#actor iterates over ${subject}`);
        this.collection = collection;
        this.subject = subject;
        this.fn = fn;
    }
    async performAs(actor) {
        const collection = await actor.answer(this.collection);
        for (const [index, item] of collection.entries()) {
            await this.fn({ actor, item }, index, collection);
        }
    }
}
//# sourceMappingURL=List.js.map