"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tag = void 0;
const tiny_types_1 = require("tiny-types");
const TagTypes = __importStar(require("./index"));
/**
 * @access public
 */
class Tag extends tiny_types_1.TinyType {
    static humanReadable(tagConstructor, tagName) {
        // based on https://github.com/serenity-bdd/serenity-core/blob/8f7d14c6dad47bb58a1585fef5f9d9a44bb963fd/serenity-model/src/main/java/net/thucydides/core/requirements/AbstractRequirementsTagProvider.java#L36
        const name = String(tagName)
            .trim()
            .match(/[\dA-Z]{2,}(?=[A-Z][a-z]+\d*|\b)|[A-Z]?[a-z]+\d*|[A-Z]|\d+/g)
            .map(chunk => /^[A-Z]+$/.test(chunk) ? chunk : chunk.toLowerCase())
            .join('_')
            .replace(/[\s_]+/g, ' ');
        return new tagConstructor(name.charAt(0).toUpperCase() + name.slice(1));
    }
    static fromJSON(o) {
        const type = (0, tiny_types_1.ensure)('serialised tag type', o.type, (0, tiny_types_1.isDefined)(), (0, tiny_types_1.isString)());
        const found = Object.keys(TagTypes).find(t => TagTypes[t].Type === type) || TagTypes.ArbitraryTag.name;
        if (Object.prototype.hasOwnProperty.call(TagTypes[found], 'fromJSON')) {
            return TagTypes[found].fromJSON(o);
        }
        return new TagTypes[found](o.name);
    }
    constructor(name, type) {
        super();
        this.name = name;
        this.type = type;
        (0, tiny_types_1.ensure)('Tag name', name, (0, tiny_types_1.isDefined)(), (0, tiny_types_1.property)('length', (0, tiny_types_1.isGreaterThan)(0)));
        (0, tiny_types_1.ensure)('Tag type', type, (0, tiny_types_1.isDefined)(), (0, tiny_types_1.property)('length', (0, tiny_types_1.isGreaterThan)(0)));
    }
    toJSON() {
        return super.toJSON();
    }
}
exports.Tag = Tag;
//# sourceMappingURL=Tag.js.map