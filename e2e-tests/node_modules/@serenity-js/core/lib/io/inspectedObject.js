"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.inspectedObject = void 0;
const util = __importStar(require("util")); // eslint-disable-line unicorn/import-style
const reflection_1 = require("./reflection");
function inspectedObject(value, allowFields) {
    return function (depth, options, inspect = util.inspect) {
        const typeName = options.stylize((0, reflection_1.typeOf)(value), 'special');
        if (depth < 0) {
            return typeName;
        }
        const fields = Object.getOwnPropertyNames(value)
            .filter(field => typeof value[field] !== 'function')
            .filter(field => allowFields ? allowFields.includes(field) : true)
            .sort();
        if (fields.length === 0) {
            return `${typeName} { }`;
        }
        const newOptions = Object.assign({}, options, {
            depth: (options === null || options === void 0 ? void 0 : options.depth) > 0
                ? options.depth - 1
                : undefined,
        });
        const padding = ' '.repeat(2);
        const lines = fields.flatMap(field => `${field}: ${inspect(value[field], newOptions)}`
            .split('\n')
            .map(line => `${padding}${line}`)).join('\n');
        return `${typeName} {\n${lines}\n}`;
    };
}
exports.inspectedObject = inspectedObject;
//# sourceMappingURL=inspectedObject.js.map