"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleLoader = void 0;
// eslint-disable-next-line @typescript-eslint/no-var-requires
const Module = require('module'); // No type definitions available
const path = __importStar(require("path")); // eslint-disable-line unicorn/import-style
const Version_1 = require("./Version");
/**
 * Dynamically loads Node modules located relative to `cwd`.
 */
class ModuleLoader {
    /**
     * @param {string} cwd
     *  Current working directory, relative to which Node modules should be resolved.
     */
    constructor(cwd) {
        this.cwd = cwd;
    }
    /**
     * Returns `true` if a given module is available to be required, false otherwise.
     *
     * @param moduleId
     *  NPM module id, for example 'cucumber' or '@serenity-js/core'
     */
    hasAvailable(moduleId) {
        try {
            return !!this.require(moduleId);
        }
        catch {
            return false;
        }
    }
    /**
     * Works like `require.resolve`, but relative to specified current working directory
     *
     * @param moduleId
     *  NPM module id, for example `cucumber` or `@serenity-js/core`
     *
     * @returns
     *  Path a given Node module
     */
    resolve(moduleId) {
        const fromFile = path.join(this.cwd, 'noop.js');
        return Module._resolveFilename(moduleId, {
            id: fromFile,
            filename: fromFile,
            paths: Module._nodeModulePaths(this.cwd),
        });
    }
    /**
     * Works like `require`, but relative to specified current working directory
     *
     * @param moduleId
     */
    require(moduleId) {
        try {
            return require(this.resolve(moduleId));
        }
        catch {
            return require(moduleId);
        }
    }
    /**
     * Returns {@apilink Version} of module specified by `moduleId`, based on its `package.json`.
     *
     * @param moduleId
     */
    versionOf(moduleId) {
        return new Version_1.Version(this.require(`${moduleId}/package.json`).version);
    }
}
exports.ModuleLoader = ModuleLoader;
//# sourceMappingURL=ModuleLoader.js.map