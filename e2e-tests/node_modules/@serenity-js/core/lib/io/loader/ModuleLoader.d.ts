import { Version } from './Version';
/**
 * Dynamically loads Node modules located relative to `cwd`.
 */
export declare class ModuleLoader {
    readonly cwd: string;
    /**
     * @param {string} cwd
     *  Current working directory, relative to which Node modules should be resolved.
     */
    constructor(cwd: string);
    /**
     * Returns `true` if a given module is available to be required, false otherwise.
     *
     * @param moduleId
     *  NPM module id, for example 'cucumber' or '@serenity-js/core'
     */
    hasAvailable(moduleId: string): boolean;
    /**
     * Works like `require.resolve`, but relative to specified current working directory
     *
     * @param moduleId
     *  NPM module id, for example `cucumber` or `@serenity-js/core`
     *
     * @returns
     *  Path a given Node module
     */
    resolve(moduleId: string): string;
    /**
     * Works like `require`, but relative to specified current working directory
     *
     * @param moduleId
     */
    require(moduleId: string): any;
    /**
     * Returns {@apilink Version} of module specified by `moduleId`, based on its `package.json`.
     *
     * @param moduleId
     */
    versionOf(moduleId: string): Version;
}
//# sourceMappingURL=ModuleLoader.d.ts.map