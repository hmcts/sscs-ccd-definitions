"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystem = void 0;
const cuid2_1 = require("@paralleldrive/cuid2");
const gracefulFS = __importStar(require("graceful-fs"));
const nodeOS = __importStar(require("os"));
const util_1 = require("util");
const Path_1 = require("./Path");
class FileSystem {
    constructor(root, fs = gracefulFS, os = nodeOS, directoryMode = Number.parseInt('0777', 8) & (~process.umask())) {
        this.root = root;
        this.fs = fs;
        this.os = os;
        this.directoryMode = directoryMode;
    }
    store(relativeOrAbsolutePathToFile, data, encoding) {
        return Promise.resolve()
            .then(() => this.ensureDirectoryExistsAt(relativeOrAbsolutePathToFile.directory()))
            .then(() => this.write(this.root.resolve(relativeOrAbsolutePathToFile), data, encoding));
    }
    createReadStream(relativeOrAbsolutePathToFile) {
        return this.fs.createReadStream(this.root.resolve(relativeOrAbsolutePathToFile).value);
    }
    createWriteStreamTo(relativeOrAbsolutePathToFile) {
        return this.fs.createWriteStream(this.root.resolve(relativeOrAbsolutePathToFile).value);
    }
    stat(relativeOrAbsolutePathToFile) {
        const stat = (0, util_1.promisify)(this.fs.stat);
        return stat(this.root.resolve(relativeOrAbsolutePathToFile).value);
    }
    exists(relativeOrAbsolutePathToFile) {
        return this.fs.existsSync(this.root.resolve(relativeOrAbsolutePathToFile).value);
    }
    remove(relativeOrAbsolutePathToFileOrDirectory) {
        const stat = (0, util_1.promisify)(this.fs.stat), unlink = (0, util_1.promisify)(this.fs.unlink), readdir = (0, util_1.promisify)(this.fs.readdir), rmdir = (0, util_1.promisify)(this.fs.rmdir);
        const absolutePath = this.root.resolve(relativeOrAbsolutePathToFileOrDirectory);
        return stat(absolutePath.value)
            .then(result => result.isFile()
            ? unlink(absolutePath.value)
            : readdir(absolutePath.value)
                .then(entries => Promise.all(entries.map(entry => this.remove(absolutePath.join(new Path_1.Path(entry))))).then(() => rmdir(absolutePath.value))))
            .then(() => void 0)
            .catch(error => {
            if ((error === null || error === void 0 ? void 0 : error.code) === 'ENOENT') {
                return void 0;
            }
            throw error;
        });
    }
    ensureDirectoryExistsAt(relativeOrAbsolutePathToDirectory) {
        const absolutePath = this.root.resolve(relativeOrAbsolutePathToDirectory);
        return absolutePath.split().reduce((promisedParent, child) => {
            return promisedParent.then(parent => new Promise((resolve, reject) => {
                const current = parent.resolve(new Path_1.Path(child));
                this.fs.mkdir(current.value, this.directoryMode, error => {
                    if (!error || error.code === 'EEXIST') {
                        return resolve(current);
                    }
                    // To avoid `EISDIR` error on Mac and `EACCES`-->`ENOENT` and `EPERM` on Windows.
                    if (error.code === 'ENOENT') { // Throw the original parentDir error on `current` `ENOENT` failure.
                        throw new Error(`EACCES: permission denied, mkdir '${parent.value}'`);
                    }
                    const caughtError = !!~['EACCES', 'EPERM', 'EISDIR'].indexOf(error.code);
                    if (!caughtError || (caughtError && current.equals(relativeOrAbsolutePathToDirectory))) {
                        throw error; // Throw if it's just the last created dir.
                    }
                    return resolve(current);
                });
            }));
        }, Promise.resolve(absolutePath.root()));
    }
    rename(source, destination) {
        const rename = (0, util_1.promisify)(this.fs.rename);
        return rename(source.value, destination.value);
    }
    tempFilePath(prefix = '', suffix = '.tmp') {
        return Path_1.Path.from(this.fs.realpathSync(this.os.tmpdir()), `${prefix}${(0, cuid2_1.createId)()}${suffix}`);
    }
    write(path, data, encoding) {
        return new Promise((resolve, reject) => {
            this.fs.writeFile(path.value, data, encoding, error => error
                ? reject(error)
                : resolve(path));
        });
    }
}
exports.FileSystem = FileSystem;
//# sourceMappingURL=FileSystem.js.map