/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import * as nodeFS from 'fs';
import { WriteFileOptions } from 'fs';
import * as nodeOS from 'os';
import { Path } from './Path';
export declare class FileSystem {
    private readonly root;
    private readonly fs;
    private readonly os;
    private readonly directoryMode;
    constructor(root: Path, fs?: typeof nodeFS, os?: typeof nodeOS, directoryMode?: number);
    store(relativeOrAbsolutePathToFile: Path, data: string | NodeJS.ArrayBufferView, encoding?: WriteFileOptions): Promise<Path>;
    createReadStream(relativeOrAbsolutePathToFile: Path): nodeFS.ReadStream;
    createWriteStreamTo(relativeOrAbsolutePathToFile: Path): nodeFS.WriteStream;
    stat(relativeOrAbsolutePathToFile: Path): Promise<nodeFS.Stats>;
    exists(relativeOrAbsolutePathToFile: Path): boolean;
    remove(relativeOrAbsolutePathToFileOrDirectory: Path): Promise<void>;
    ensureDirectoryExistsAt(relativeOrAbsolutePathToDirectory: Path): Promise<Path>;
    rename(source: Path, destination: Path): Promise<void>;
    tempFilePath(prefix?: string, suffix?: string): Path;
    private write;
}
//# sourceMappingURL=FileSystem.d.ts.map