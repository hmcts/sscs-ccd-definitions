"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureFileMapper = void 0;
const io_1 = require("@serenity-js/core/lib/io");
const model_1 = require("@serenity-js/core/lib/model");
const model_2 = require("../model");
const FeatureFileMap_1 = require("./FeatureFileMap");
/**
 * @private
 */
class FeatureFileMapper {
    map(document, path) {
        const map = new FeatureFileMap_1.FeatureFileMap();
        if (!(document && document.feature)) {
            return map;
        }
        let background;
        document.feature.children.forEach(scenarioDefinition => {
            switch (scenarioDefinition.type) {
                case 'Background':
                    background = new model_2.Background(new io_1.FileSystemLocation(path, scenarioDefinition.location.line, scenarioDefinition.location.column), new model_1.Name(scenarioDefinition.name), scenarioDefinition.description && new model_1.Description(scenarioDefinition.description), scenarioDefinition.steps.map(step => this.asStep(path, step)));
                    map.set(background).onLine(scenarioDefinition.location.line);
                    break;
                case 'Scenario':
                    map.set(new model_2.Scenario(new io_1.FileSystemLocation(path, scenarioDefinition.location.line, scenarioDefinition.location.column), new model_1.Name(scenarioDefinition.name), scenarioDefinition.description && new model_1.Description(scenarioDefinition.description), (background ? background.steps : []).concat(scenarioDefinition.steps.map(step => this.asStep(path, step))), this.tagsFrom(document.feature.tags, scenarioDefinition.tags))).onLine(scenarioDefinition.location.line);
                    break;
                case 'ScenarioOutline': {
                    const outline = scenarioDefinition, parameters = {};
                    // @see https://github.com/cucumber/gherkin-javascript/blob/v5.1.0/lib/gherkin/pickles/compiler.js#L45
                    outline.examples.filter(e => e.tableHeader !== undefined).forEach(examples => {
                        const exampleSetName = new model_1.Name(examples.name), exampleSetDescription = new model_1.Description(examples.description || ''), variableCells = examples.tableHeader.cells;
                        examples.tableBody.forEach(values => {
                            const valueCells = values.cells, steps = background ? background.steps : [];
                            outline.steps.forEach(scenarioOutlineStep => {
                                const interpolatedStepText = this.interpolate(scenarioOutlineStep.text, variableCells, valueCells), interpolatedStepArgument = this.interpolateStepArgument(scenarioOutlineStep.argument, variableCells, valueCells);
                                steps.push(new model_2.Step(new io_1.FileSystemLocation(path, scenarioOutlineStep.location.line, scenarioOutlineStep.location.column), new model_1.Name([
                                    scenarioOutlineStep.keyword,
                                    interpolatedStepText,
                                    interpolatedStepArgument,
                                ].filter(_ => !!_).join(''))));
                            });
                            const scenarioParameters = variableCells
                                .map((cell, i) => ({ [cell.value]: valueCells[i].value }))
                                .reduce((acc, current) => {
                                return { ...acc, ...current };
                            }, {});
                            parameters[values.location.line] = new model_1.ScenarioParameters(exampleSetName, exampleSetDescription, scenarioParameters);
                            map.set(new model_2.Scenario(new io_1.FileSystemLocation(path, values.location.line, values.location.column), new model_1.Name(outline.name), outline.description && new model_1.Description(outline.description), steps, this.tagsFrom(document.feature.tags, outline.tags, examples.tags), new io_1.FileSystemLocation(path, outline.location.line, outline.location.column))).onLine(values.location.line);
                        });
                    });
                    map.set(new model_2.ScenarioOutline(new io_1.FileSystemLocation(path, outline.location.line, outline.location.column), new model_1.Name(outline.name), outline.description && new model_1.Description(outline.description), (background ? background.steps : []).concat(outline.steps.map(step => this.asStep(path, step, [], []))), parameters)).onLine(scenarioDefinition.location.line);
                    break;
                }
            }
        });
        map.set(new model_2.Feature(new io_1.FileSystemLocation(path, document.feature.location.line, document.feature.location.column), new model_1.Name(document.feature.name), document.feature.description && new model_1.Description(document.feature.description), background)).onLine(document.feature.location.line);
        return map;
    }
    asStep(path, step, variableCells = [], valueCells = []) {
        return new model_2.Step(new io_1.FileSystemLocation(path, step.location.line, step.location.column), new model_1.Name([
            step.keyword,
            step.text,
            this.interpolateStepArgument(step.argument, variableCells, valueCells),
        ].filter(_ => !!_).join('')));
    }
    tagsFrom(...listsOfTags) {
        return flattened(flattened(listsOfTags).map(tag => model_1.Tags.from(tag.name)));
    }
    interpolateStepArgument(argument, variableCells, valueCells) {
        switch (true) {
            case argument && argument.type === 'DocString':
                return '\n' + this.interpolate(argument.content, variableCells, valueCells);
            case argument && argument.type === 'DataTable':
                return '\n' + this.interpolate(argument.rows
                    .map(row => `| ${row.cells.map(cell => cell.value).join(' | ')} |`)
                    .join('\n'), variableCells, valueCells);
            default:
                return '';
        }
    }
    // @see https://github.com/cucumber/gherkin-javascript/blob/v5.1.0/lib/gherkin/pickles/compiler.js#L115
    interpolate(text, variableCells, valueCells) {
        variableCells.forEach((variableCell, n) => {
            const valueCell = valueCells[n];
            const search = new RegExp('<' + variableCell.value + '>', 'g');
            // JS Specific - dollar sign needs to be escaped with another dollar sign
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter
            const replacement = valueCell.value.replace(new RegExp('\\$', 'g'), '$$$$');
            text = text.replace(search, replacement);
        });
        return text;
    }
}
exports.FeatureFileMapper = FeatureFileMapper;
/**
 * @private
 */
function flattened(listsOfLists) {
    return listsOfLists.reduce((acc, list) => acc.concat(list), []);
}
//# sourceMappingURL=FeatureFileMapper.js.map