"use strict";
/* eslint-disable @typescript-eslint/ban-types */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureFileMap = void 0;
const errors_1 = require("./errors");
/**
 * @private
 */
class FeatureFileMap {
    constructor(map = {}) {
        this.map = map;
    }
    set(item) {
        return ({
            onLine: (line) => {
                this.map[line] = item;
                return this;
            },
        });
    }
    get(type) {
        return ({
            onLine: (line) => {
                const found = this.map[line];
                if (!found) {
                    throw new errors_1.ItemNotFoundError(`Nothing was found on line ${line}`);
                }
                if (!(found instanceof type)) {
                    throw new errors_1.ItemNotFoundError(`Item on line ${line} is a ${found.constructor.name}, not a ${type.name}`);
                }
                return found;
            },
        });
    }
    getFirst(type) {
        const items = Object.keys(this.map).map(line => this.map[line]), found = items.find(value => value instanceof type);
        if (!found) {
            const existingTypes = items.map(item => item.constructor.name).join(', ') || 'no items.';
            throw new errors_1.ItemNotFoundError(`Didn't find any ${type.name} amongst ${existingTypes}`);
        }
        return found;
    }
    size() {
        return Object.keys(this.map).length;
    }
}
exports.FeatureFileMap = FeatureFileMap;
//# sourceMappingURL=FeatureFileMap.js.map