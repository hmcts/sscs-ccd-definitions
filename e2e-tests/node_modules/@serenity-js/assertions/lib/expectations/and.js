"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.and = void 0;
const core_1 = require("@serenity-js/core");
/**
 * Creates an {@apilink Expectation|expectation} that is met when all the `expectations` are met for the given actual value.
 *
 * Use `and` to combine several expectations using logical "and",
 *
 * ## Combining several expectations
 *
 * ```ts
 * import { actorCalled } from '@serenity-js/core'
 * import { Ensure, and, startsWith, endsWith } from '@serenity-js/assertions'
 *
 * await actorCalled('Ester').attemptsTo(
 *   Ensure.that('Hello World!', and(startsWith('Hello'), endsWith('!'))),
 * )
 * ```
 *
 * @param expectations
 *
 * @group Expectations
 */
function and(...expectations) {
    return new And(expectations);
}
exports.and = and;
/**
 * @package
 */
class And extends core_1.Expectation {
    constructor(expectations) {
        const description = expectations.map(expectation => expectation.toString()).join(And.Separator);
        super('and', description, async (actor, actual) => {
            let outcome;
            for (const expectation of expectations) {
                outcome = await actor.answer(expectation.isMetFor(actual));
                if (outcome instanceof core_1.ExpectationNotMet) {
                    return new core_1.ExpectationNotMet(description, outcome.expectation, outcome.expected, outcome.actual);
                }
            }
            return new core_1.ExpectationMet(description, outcome === null || outcome === void 0 ? void 0 : outcome.expectation, outcome === null || outcome === void 0 ? void 0 : outcome.expected, outcome === null || outcome === void 0 ? void 0 : outcome.actual);
        });
        this.expectations = expectations;
    }
}
And.Separator = ' and ';
//# sourceMappingURL=and.js.map