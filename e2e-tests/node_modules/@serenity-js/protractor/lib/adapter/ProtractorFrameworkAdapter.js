"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtractorFrameworkAdapter = void 0;
const core_1 = require("@serenity-js/core");
const protractor_1 = require("protractor");
const objects_1 = require("tiny-types/lib/objects");
const browser_detector_1 = require("./browser-detector");
const reporter_1 = require("./reporter");
const runner_1 = require("./runner");
const deepmerge = require("deepmerge");
const core_2 = require("@serenity-js/core");
const screenplay_1 = require("../screenplay");
const querySelectorShadowDomPlugin = require('query-selector-shadow-dom/plugins/protractor'); // eslint-disable-line @typescript-eslint/no-var-requires
/**
 * @private
 */
class ProtractorFrameworkAdapter {
    constructor(serenity, protractorRunner, detector) {
        this.serenity = serenity;
        this.protractorRunner = protractorRunner;
        this.detector = detector;
    }
    /**
     * @param specs
     *  Paths to spec files
     */
    run(specs) {
        var _a, _b, _c, _d, _e;
        if (!((_b = (_a = this.protractorRunner.plugins_) === null || _a === void 0 ? void 0 : _a.pluginObjs) === null || _b === void 0 ? void 0 : _b.some(plugin => plugin.name === querySelectorShadowDomPlugin.name))) {
            (_d = (_c = this.protractorRunner.plugins_) === null || _c === void 0 ? void 0 : _c.pluginObjs) === null || _d === void 0 ? void 0 : _d.push(querySelectorShadowDomPlugin);
        }
        const runner = this.detector.runnerFor(this.protractorRunner.getConfig());
        const reporter = new reporter_1.ProtractorReporter(this.protractorRunner, runner.successThreshold());
        const config = deepmerge(this.defaultConfig(), this.protractorRunner.getConfig(), {
            isMergeableObject: objects_1.isRecord,
        });
        this.serenity.configure({
            cueTimeout: config.serenity.cueTimeout,
            interactionTimeout: config.serenity.interactionTimeout,
            diffFormatter: (_e = config.serenity.diffFormatter) !== null && _e !== void 0 ? _e : new core_1.AnsiDiffFormatter(),
            actors: config.serenity.actors || core_1.Cast.where(actor => actor.whoCan(screenplay_1.BrowseTheWebWithProtractor.using(protractor_1.protractor.browser), core_2.TakeNotes.usingAnEmptyNotepad())),
            crew: [
                browser_detector_1.BrowserDetector.with(browser_detector_1.StandardisedCapabilities.of(() => protractor_1.protractor.browser)),
                ...config.serenity.crew,
                reporter,
            ],
        });
        return Promise.resolve()
            .then(() => this.protractorRunner.runTestPreparer(runner_1.TestRunnerDetector.protractorCliOptions()))
            .then(() => runner.load(specs))
            .then(() => runner.run())
            .then(() => (config.onComplete || noop)())
            .then(() => reporter.report());
    }
    defaultConfig() {
        return {
            serenity: {
                crew: [
                    core_1.ArtifactArchiver.storingArtifactsAt(process.cwd(), 'target/site/serenity'),
                ],
            },
        };
    }
}
exports.ProtractorFrameworkAdapter = ProtractorFrameworkAdapter;
/** @private */
function noop() {
    // no-op
}
//# sourceMappingURL=ProtractorFrameworkAdapter.js.map