"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cucumber_1 = require("@cucumber/cucumber");
const any_ccd_page_1 = require("../../pages/any-ccd.page");
const adjournment_page_1 = require("../../pages/adjournment.page");
const chai_1 = require("chai");
const wait_1 = require("../../enums/wait");
const protractor_1 = require("protractor");
const anyCcdPage = new any_ccd_page_1.AnyCcdPage();
const adjournmentPage = new adjournment_page_1.AdjournmentPage();
(0, cucumber_1.When)('I book a hearing', async function () {
    await anyCcdPage.clickAddNew();
    await adjournmentPage.addVenue('21', '01', '2024');
});
(0, cucumber_1.When)('I generate an adjournment notice', async function () {
    await anyCcdPage.clickElementById('adjournCaseGenerateNotice_Yes');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCasePanelMembersExcluded-No');
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Panel members')).to.equal(true);
    await adjournmentPage.addPanelMembers();
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseTypeOfHearing-faceToFace');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseCanCaseBeListedRightAway_Yes');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseTypeOfNextHearing-faceToFace');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingVenue-sameVenue');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingListingDurationType-standardTimeSlot');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseInterpreterRequired_No');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingDateType-firstAvailableDate');
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Reasons for adjournment')).to.equal(true);
    await adjournmentPage.setAdjournCaseReasonsText();
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Additional directions (Optional)')).to.equal(true);
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Preview Adjournment')).to.equal(true);
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Check your answers')).to.equal(true);
    await anyCcdPage.clickSubmit();
});
(0, cucumber_1.When)('I upload an adjournment notice and issue direction {string}', async function (issueDirection) {
    await anyCcdPage.clickElementById('adjournCaseGenerateNotice_No');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCasePanelMembersExcluded-No');
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Panel members')).to.equal(true);
    await adjournmentPage.addPanelMembers();
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById(`adjournCaseAreDirectionsBeingMadeToParties_${issueDirection}`);
    await anyCcdPage.clickContinue();
    if (issueDirection === 'Yes') {
        await anyCcdPage.clickElementById('adjournCaseDirectionsDueDateDaysOffset-14');
        await anyCcdPage.clickContinue();
    }
    await anyCcdPage.clickElementById('adjournCaseTypeOfNextHearing-faceToFace');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingVenue-sameVenue');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingListingDurationType-standardTimeSlot');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseInterpreterRequired_No');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingDateType-firstAvailableDate');
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Preview Adjournment')).to.equal(true);
    await adjournmentPage.uploadAdjournmentNotice();
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Check your answers')).to.equal(true);
    await protractor_1.browser.sleep(wait_1.Wait.extended);
    await anyCcdPage.clickSubmit();
});
(0, cucumber_1.When)('I continue', async function () {
    await anyCcdPage.clickSubmit();
});
(0, cucumber_1.Then)('the case should be in Hearing appeal status', async function () {
    await protractor_1.browser.sleep(500);
    await anyCcdPage.reloadPage();
    (0, chai_1.expect)(await anyCcdPage.contentContains('Hearing')).to.equal(true);
    await protractor_1.browser.sleep(5000);
});
(0, cucumber_1.When)('I generate an adjournment notice with new hearing type and duration', async function () {
    await anyCcdPage.clickElementById('adjournCaseGenerateNotice_Yes');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCasePanelMembersExcluded-Yes');
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Panel members')).to.equal(true);
    await adjournmentPage.addPanelMembers();
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseTypeOfHearing-faceToFace');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseCanCaseBeListedRightAway_Yes');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseTypeOfNextHearing-telephone');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingListingDurationType-standardTimeSlot');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseInterpreterRequired_Yes');
    await anyCcdPage.chooseOptionContainingText('adjournCaseInterpreterLanguageList', 'Dutch');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingDateType-firstAvailableDate');
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Reasons for adjournment')).to.equal(true);
    await adjournmentPage.setAdjournCaseReasonsText();
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Additional directions (Optional)')).to.equal(true);
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Preview Adjournment')).to.equal(true);
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Check your answers')).to.equal(true);
    await anyCcdPage.clickSubmit();
});
(0, cucumber_1.When)('I generate an adjournment notice with video hearing type and non standard timeslot with session', async function () {
    await anyCcdPage.clickElementById('adjournCaseGenerateNotice_Yes');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCasePanelMembersExcluded-No');
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Panel members')).to.equal(true);
    await adjournmentPage.addPanelMembers();
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseTypeOfHearing-faceToFace');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseCanCaseBeListedRightAway_No');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseAreDirectionsBeingMadeToParties_Yes');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseDirectionsDueDateDaysOffset-14');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseTypeOfNextHearing-video');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingListingDurationType-nonStandardTimeSlot');
    await (0, protractor_1.element)(protractor_1.by.id('adjournCaseNextHearingListingDuration')).sendKeys('2');
    await anyCcdPage.chooseOptionContainingText('adjournCaseNextHearingListingDurationUnits', 'Session(s)');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseInterpreterRequired_No');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingDateType-firstAvailableDateAfter');
    await anyCcdPage.clickElementById('adjournCaseNextHearingDateOrPeriod-provideDate');
    await (0, protractor_1.element)(protractor_1.by.id('adjournCaseNextHearingFirstAvailableDateAfterDate-day')).sendKeys('20');
    await (0, protractor_1.element)(protractor_1.by.id('adjournCaseNextHearingFirstAvailableDateAfterDate-month')).sendKeys('10');
    await (0, protractor_1.element)(protractor_1.by.id('adjournCaseNextHearingFirstAvailableDateAfterDate-year')).sendKeys('2024');
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Reasons for adjournment')).to.equal(true);
    await adjournmentPage.setAdjournCaseReasonsText();
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Additional directions (Optional)')).to.equal(true);
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Preview Adjournment')).to.equal(true);
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Check your answers')).to.equal(true);
    await anyCcdPage.clickSubmit();
});
(0, cucumber_1.When)('I generate an adjournment notice with Paper hearing type', async function () {
    await anyCcdPage.clickElementById('adjournCaseGenerateNotice_Yes');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCasePanelMembersExcluded-Yes');
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Panel members')).to.equal(true);
    await adjournmentPage.addPanelMembers();
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseTypeOfHearing-faceToFace');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseCanCaseBeListedRightAway_Yes');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseTypeOfNextHearing-paper');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingDateType-firstAvailableDate');
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Reasons for adjournment')).to.equal(true);
    await adjournmentPage.setAdjournCaseReasonsText();
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Additional directions (Optional)')).to.equal(true);
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Preview Adjournment')).to.equal(true);
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Check your answers')).to.equal(true);
    await anyCcdPage.clickSubmit();
});
(0, cucumber_1.When)('I generate an adjournment notice with face to face hearing type', async function () {
    await anyCcdPage.clickElementById('adjournCaseGenerateNotice_Yes');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCasePanelMembersExcluded-Yes');
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Panel members')).to.equal(true);
    await adjournmentPage.addPanelMembers();
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseTypeOfHearing-paper');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseCanCaseBeListedRightAway_Yes');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseTypeOfNextHearing-faceToFace');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingVenue-sameVenue');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingListingDurationType-nonStandardTimeSlot');
    await (0, protractor_1.element)(protractor_1.by.id('adjournCaseNextHearingListingDuration')).sendKeys('2');
    await anyCcdPage.chooseOptionContainingText('adjournCaseNextHearingListingDurationUnits', 'Minutes');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseInterpreterRequired_No');
    await anyCcdPage.clickContinue();
    await anyCcdPage.clickElementById('adjournCaseNextHearingDateType-firstAvailableDate');
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Reasons for adjournment')).to.equal(true);
    await adjournmentPage.setAdjournCaseReasonsText();
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Additional directions (Optional)')).to.equal(true);
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Preview Adjournment')).to.equal(true);
    await anyCcdPage.clickContinue();
    (0, chai_1.expect)(await anyCcdPage.pageHeadingContains('Check your answers')).to.equal(true);
    await anyCcdPage.clickSubmit();
});
(0, cucumber_1.Then)('new hearing value requirements should be seen against the case', async function () {
    //  await listingRequirementsPage.verifyOverriddenHearingValues(); -> Test ignored for now due to SSCSCI-811 bug
});
(0, cucumber_1.Then)('new hearing request must be triggered against the case', async function () {
    await anyCcdPage.clickTab('History');
    (0, chai_1.expect)(await anyCcdPage.getFieldValue('Add a hearing')).to.equal('Add a hearing');
    await anyCcdPage.clickTab('Hearings');
});
(0, cucumber_1.Then)('new hearing value requirements for video hearing type should be seen against the case', async function () {
    // await listingRequirementsPage.verifyOverriddenHearingValuesForVideoAdjourned(); -> Test ignored for now due to SSCSCI-811 bug
});
(0, cucumber_1.Then)('new hearing value requirements for paper hearing type should be seen against the case', async function () {
    // await listingRequirementsPage.verifyOverriddenHearingValuesForPaperAdjourned(); -> Test ignored for now due to SSCSCI-811 bug
});
(0, cucumber_1.Then)('new hearing value requirements for face to face hearing type should be seen against the case', async function () {
    // await listingRequirementsPage.verifyOverriddenHearingValuesForFaceToFaceAdjourned(); -> Test ignored for now due to SSCSCI-811 bug
});
//# sourceMappingURL=adjournment.steps.js.map