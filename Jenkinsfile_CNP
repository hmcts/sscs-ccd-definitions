#!groovy
properties([
        parameters([
                string(name: 'URL_TO_TEST', defaultValue: 'https://manage-case.aat.platform.hmcts.net/list/case?jurisdiction=sscs', description: 'The URL you want to run these tests against'),
                string(name: 'CCD_GATEWAY_URL', defaultValue: 'https://gateway-ccd.aat.platform.hmcts.net', description: 'The CCD Gateway URL these tests will need to run'),
                string(name: 'TRIBUNALS_API_URI', defaultValue: 'http://sscs-tribunals-api-aat.service.core-compute-aat.internal', description: 'The API service to create test data'),
                string(name: 'NUM_TESTS_IN_PARALLEL', defaultValue: '50', description: 'The number of tests to run in parallel'),
                string(name: 'NIGHTLY_TAG', defaultValue: '--cucumberOpts.tags=@nightly-test', description: 'Tag for nightly build'),
                string(name: 'PREVIEW_TAG', defaultValue: '--cucumberOpts.tags=@preview-test', description: 'Tag for preview build')
        ])
])

@Library("Infrastructure")

def product = "sscs"
def component = "ccd-definitions"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
        'sscs-${env}': [
                secret('test-e2e-caseofficer-username', 'TEST_CASEOFFICER_USERNAME'),
                secret('test-e2e-caseofficer-password', 'TEST_CASEOFFICER_PASSWORD'),
                secret('test-e2e-hmc-caseofficer-username', 'TEST_HMC_CASEOFFICER_USERNAME'),
                secret('test-e2e-hmc-caseofficer-password', 'TEST_HMC_CASEOFFICER_PASSWORD'),
                secret('test-e2e-judge-username', 'TEST_JUDGE_USERNAME'),
                secret('test-e2e-judge-password', 'TEST_JUDGE_PASSWORD'),
                secret('test-e2e-dwp-username', 'TEST_DWP_USERNAME'),
                secret('test-e2e-dwp-password', 'TEST_DWP_PASSWORD'),
                secret('test-e2e-hmrc-username', 'TEST_HMRC_USERNAME'),
                secret('test-e2e-hmrc-password', 'TEST_HMRC_PASSWORD')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def branchesToSync = ['demo', 'ithc', 'perftest']

withPipeline("nodejs", product, component) {
  loadVaultSecrets(secrets)
  enableHighLevelDataSetup()
  syncBranchesWithMaster(branchesToSync)
   
    onPR{
        env.ENVIRONMENT="preview"
    }
    onMaster{
        env.ENVIRONMENT="aat"
    }

    before('functionalTest:preview') {
        // Temporarily disable running tests on preview env    
        // sh """
        //    ./bin/pull-latest-ccd-files.sh
        // """
        env.TEST_E2E_URL_WEB = params.URL_TO_TEST
        env.TEST_E2E_URL_GATEWAY = params.CCD_GATEWAY_URL
        env.TEST_E2E_API_URI = params.TRIBUNALS_API_URI
        env.TEST_E2E_NUM_BROWSERS = params.NUM_TESTS_IN_PARALLEL
        env.TEST_E2E_WAIT_FOR_ANGULAR = 'false'
        env.TEST_E2E_FAIL_FAST = 'false'
        env.TEST_E2E_ANNOTATION = params.PREVIEW_TAG
        env.TEST_E2E_RETRIES = 5

    }

    afterAlways('functionalTest:preview') {
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "e2e-tests/reports/tests-results/functional/",
                reportFiles          : 'index.html',
                reportName           : 'ExUi Functional Test Report'
        ])
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'e2e-tests/reports/tests-results/functional/*'
    }

    before('functionalTest:aat') {
        //sh """
        //   ./bin/pull-latest-ccd-files.sh
        //"""

        env.TEST_E2E_URL_WEB = params.URL_TO_TEST
        env.TEST_E2E_URL_GATEWAY = params.CCD_GATEWAY_URL
        env.TEST_E2E_API_URI = params.TRIBUNALS_API_URI
        env.TEST_E2E_NUM_BROWSERS = params.NUM_TESTS_IN_PARALLEL
        env.TEST_E2E_WAIT_FOR_ANGULAR = 'false'
        env.TEST_E2E_FAIL_FAST = 'false'
        env.TEST_E2E_ANNOTATION = params.PREVIEW_TAG
        env.TEST_E2E_RETRIES = 5
    }

    afterAlways('functionalTest:aat') {
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "e2e-tests/reports/tests-results/functional/",
                reportFiles          : 'index.html',
                reportName           : 'ExUi Functional Test Report'
        ])
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/functional/*'
    }

  println """done!""".stripIndent()
}
